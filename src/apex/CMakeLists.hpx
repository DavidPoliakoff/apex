#  Copyright (c) 2014 University of Oregon
#
#  Distributed under the Boost Software License, Version 1.0. (See accompanying
#  file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

# Create a library called "apex"

configure_file(
  ${CMAKE_SOURCE_DIR}/apex/src/apex/apex_version.h.in
  ${CMAKE_BINARY_DIR}/apex_version.h
)

include_directories(${CMAKE_BINARY_DIR})

set(CMAKE_MODULE_PATH "${hpx_SOURCE_DIR}/apex/cmake/Modules" ${CMAKE_MODULE_PATH})

hpx_info("apex" "Will build APEX")

set (APEX_VERSION_MAJOR 0)
set (APEX_VERSION_MINOR 1)

set(APEX_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(APEX_SOURCE_DIR ${APEX_SOURCE_DIR} PARENT_SCOPE)
set(APEX_BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR})
set(APEX_BINARY_DIR ${APEX_BINARY_DIR} PARENT_SCOPE)

hpx_info("apex" "APEX source dir is ${APEX_SOURCE_DIR}")
hpx_info("apex" "APEX binary dir is ${APEX_BINARY_DIR}")

configure_file (
  "${APEX_SOURCE_DIR}/apex_config.h.in"
  "${APEX_BINARY_DIR}/apex_config.h")

add_definitions(-DAPEX_HAVE_HPX3)

site_name(HOSTNAME)
string(LENGTH ${HOSTNAME} HOSTNAME_LENGTH)
if(${HOSTNAME_LENGTH} GREATER 5)
	string(SUBSTRING ${HOSTNAME} 0 6 HOST_BASENAME)
else()
	set (HOST_BASENAME ${HOSTNAME})
endif()

# this will be statically linked to the core HPX library
add_definitions(-DHPX_EXPORTS)
add_definitions(-DHPX_COROUTINE_EXPORTS)

if(NOT MSVC)
  add_definitions(-std=c++11)
  add_definitions(-fPIC)
else()
  add_definitions(-D_WINDOWS)
  add_definitions(-D_WIN32)
  add_definitions(-D_WIN32_WINNT=0x0601)
  hpx_add_compile_flag(-wd4800)     # forcing value to bool 'true' or 'false' (performance warning)
  hpx_add_compile_flag(-wd4244)     # conversion from '...' to '...', possible loss of data
  hpx_add_compile_flag(-wd4267)     # conversion from '...' to '...', possible loss of data

  # VS2012 and above has a special flag for improving the debug experience by
  # adding more symbol information to the build (-d2Zi+)
  hpx_add_compile_flag(-d2Zi+ CONFIGURATIONS RelWithDebInfo)

  # VS2013 and above know how to do link time constant data segment folding
  # VS2013 update 2 and above know how to remove debug information for
  #     non-referenced functions and data (-Zc:inline)
  if(MSVC12 OR MSVC13)
    hpx_add_compile_flag(-Zc:inline)
    hpx_add_compile_flag(-Gw CONFIGURATIONS Release RelWithDebInfo MinSizeRelease)
    hpx_add_compile_flag(-Zo CONFIGURATIONS RelWithDebInfo)
  endif()

  hpx_add_compile_flag(-bigobj) # Increase the maximum size of object file sections
  hpx_add_compile_flag(-MP)     # Multiprocessor build
endif()

if(EXISTS "/proc/stat")
    hpx_info("apex" "Building APEX with /proc/stat sampler")
    set(APEX_HAVE_PROC TRUE)
    add_definitions(-DAPEX_HAVE_PROC)
endif()


if("${HOST_BASENAME}" STREQUAL "edison")
    hpx_info("apex" "This is Edison, will build with Cray Power support")
    set(APEX_HAVE_CRAY_POWER TRUE)
    add_definitions(-DAPEX_HAVE_CRAY_POWER)
else()
    hpx_info("apex" "This is not edison")
endif()

if(APEX_HAVE_PROC)
    set(PROC_SOURCE proc_read.cpp)
    set(PROC_HEADER proc_read.h)
endif()

set(apex_headers
    apex.h
    apex_types.h
    apex_export.h
    apex.hpp
    apex_options.hpp
    concurrency_handler.hpp
    event_listener.hpp
    handler.hpp
    policy_handler.hpp
    profiler.hpp
    profiler_listener.hpp
    semaphore.hpp
    thread_instance.hpp
    apex_policies.h
    ${PROC_HEADER})


set(apex_sources
    apex.cpp
    apex_options.cpp
    thread_instance.cpp
    event_listener.cpp
    handler.cpp
    concurrency_handler.cpp
    policy_handler.cpp
    profiler_listener.cpp
    apex_policies.cpp
    ${PROC_SOURCE})


if(APEX_WITH_PAPI)
    find_package(PAPI)
    if(NOT PAPI_FOUND)
        hpx_error("apex" "Requested APEX_WITH_PAPI but could not find PAPI. Please specify PAPI_ROOT.")
    endif()
    hpx_info("apex" "Building APEX with PAPI support.")
    include_directories(${PAPI_INCLUDE_DIR})
    set(LIBS ${LIBS} ${PAPI_LIBRARIES})
    set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${PAPI_LIBRARY_DIR})
    add_definitions(-DAPEX_HAVE_PAPI)
    hpx_libraries(${HWLOC_LIBRARIES})
endif()

find_package(RCR)

if(HAVE_RCR)
  hpx_add_config_define(HPX_HAVE_RCR 1)
endif()


if(APEX_WITH_MSR)
    find_package(MSR)
    if(NOT MSR_FOUND)
        hpx_error("apex" "Requested APEX_WITH_MSR but could not find MSR. Please specify MSR_ROOT.")
    endif()
    hpx_info("apex" "Building APEX with libmsr support.")
    include_directories(${MSR_INCLUDE_DIR})
    set(LIBS ${LIBS} ${MSR_LIBRARIES})
    set(CMAKE_INSTALL_RPATH ${CMAKE_INSTALL_RPATH} ${MSR_LIBRARY_DIR})
    add_definitions(-DAPEX_HAVE_MSR)
    hpx_libraries(${MSR_LIBRARIES})
endif()


if(TAU_FOUND)
  hpx_info("apex" "Building APEX with TAU support")
  set(apex_headers ${apex_headers} tau_listener.hpp)
  set(apex_sources ${apex_sources} tau_listener.cpp)

  add_definitions(-DAPEX_HAVE_TAU)
  if(MSVC)
    add_definitions(-DTAU_WINDOWS)
    set(libs ${TAU_LIBRARY})
  endif()
else()
  hpx_info("apex" "Building APEX without TAU support")
endif()

add_hpx_library(apex
  STATIC NOLIBS
  SOURCES ${apex_sources}
  HEADERS ${apex_headers}
  FOLDER "Core/Dependencies")

# add the binary tree to the search path for include files
# so that we will find apex_config.h
if(HAVE_RCR)
include_directories("${PROJECT_BINARY_DIR}/apex/src/apex" ${RCR_INCLUDE_PATH})
else()
include_directories("${PROJECT_BINARY_DIR}/apex/src/apex")
endif()


INSTALL(FILES ${apex_headers} DESTINATION include)

set(AMPLIFIER_ROOT ${AMPLIFIER_ROOT} PARENT_SCOPE)
set(APEX_FOUND ON PARENT_SCOPE)
